name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: zip, curl
          ini-values: memory_limit=512M, phar.readonly=0
          tools: composer

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Install Box (for creating .phar)
        run: |
          curl -L https://github.com/box-project/box/releases/latest/download/box.phar -o /usr/local/bin/box
          chmod +x /usr/local/bin/box

      - name: Install PHPacker (for standalone executables)
        run: |
          composer global require phpacker/phpacker
          echo "$HOME/.composer/vendor/bin" >> $GITHUB_PATH

      - name: Run build process
        run: |
          # Create build directory
          mkdir -p build
          
          # Install dependencies
          echo "Installing dependencies..."
          composer install --no-dev --optimize-autoloader
          
          # Create .phar with Box
          echo "Creating .phar file with Box..."
          box compile
          
          echo "✅ File created: docker-backup.phar"
          
          # Generate standalone executables
          if command -v phpacker >/dev/null 2>&1; then
            echo "Generating standalone executables..."
            echo "Building for all platforms..."
            phpacker build all --src=docker-backup.phar --dest=build/ || echo "⚠️  All platforms build failed"
            echo "✅ Building standalone executables completed!"
          else
            echo "⚠️  PHPacker not available, skipping standalone executables"
          fi

      - name: List generated files (debug)
        run: |
          echo "Generated files structure:"
          ls -la docker-backup.phar || echo "No .phar file found"
          echo "Build directory structure:"
          find build -type f 2>/dev/null || echo "No build directory or files found"

      - name: Prepare release assets
        run: |
          # Create release directory
          mkdir -p release-assets
          
          # Copy .phar file
          if [ -f "docker-backup.phar" ]; then
            cp docker-backup.phar release-assets/docker-backup-${{ steps.version.outputs.VERSION }}.phar
            echo "✅ Copied .phar file"
          else
            echo "⚠️  .phar file not found"
          fi
          
          # Copy standalone executables if they exist
          if [ -d "build" ]; then
            echo "Processing build directory..."
          
            # Function to copy executables with appropriate name
            copy_executable() {
              local src_file="$1"
              local platform="$2"
              local arch="$3"
              local ext="$4"
          
              if [ -f "$src_file" ]; then
                local dest_name="docker-backup-${platform}-${arch}-${{ steps.version.outputs.VERSION }}${ext}"
                cp "$src_file" "release-assets/${dest_name}"
                echo "✅ Copied: ${dest_name}"
              else
                echo "⚠️  File not found: $src_file"
              fi
            }
          
            copy_executable "build/linux/linux-x64" "linux" "x64" ""
            copy_executable "build/linux/linux-arm" "linux" "arm64" ""
            copy_executable "build/mac/mac-x64" "macos" "x64" ""
            copy_executable "build/mac/mac-arm" "macos" "arm64" ""
            copy_executable "build/windows/windows-x64.exe" "windows" "x64" ".exe"
          else
            echo "⚠️  Build directory not found"
          fi
          
          echo "Final release assets:"
          ls -la release-assets/ || echo "No release assets found"

      - name: Verify release assets
        run: |
          if [ -d "release-assets" ] && [ "$(ls -A release-assets)" ]; then
            echo "✅ Release assets are ready:"
            ls -la release-assets/
            echo "Total files: $(ls -1 release-assets/ | wc -l)"
          else
            echo "❌ No release assets found!"
            exit 1
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Docker Backup CLI ${{ steps.version.outputs.VERSION }}
          body: |
            ## Docker Backup & Restore CLI ${{ steps.version.outputs.VERSION }}
            
            ### Downloads
            
            **Recommended**: Download the appropriate standalone executable for your system:
            - **Linux x64**: `docker-backup-linux-x64-${{ steps.version.outputs.VERSION }}`
            - **Linux ARM64**: `docker-backup-linux-arm64-${{ steps.version.outputs.VERSION }}`
            - **macOS x64**: `docker-backup-macos-x64-${{ steps.version.outputs.VERSION }}`  
            - **macOS ARM64**: `docker-backup-macos-arm64-${{ steps.version.outputs.VERSION }}`
            - **Windows x64**: `docker-backup-windows-x64-${{ steps.version.outputs.VERSION }}.exe`
            
            **Alternative**: Download the `.phar` file and run with `php docker-backup-${{ steps.version.outputs.VERSION }}.phar`
            
            ### Usage
            
            ```bash
            # Make executable (Linux/macOS)
            chmod +x docker-backup-*
            
            # Run commands
            ./docker-backup-* backup:volumes --list
            ./docker-backup-* backup:images nginx:latest
            ./docker-backup-* restore:volumes volume1.tar.gz
            ```
            
            ### Requirements
            
            - Docker installed and running
            - For standalone executables: No additional requirements
            - For .phar file: PHP 8.1+ with Docker CLI access
            
            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: release-assets/*
          fail_on_unmatched_files: true

      - name: Cleanup
        run: |
          # Remove build artifacts
          rm -rf build release-assets docker-backup.phar